{
    "teachers": [],
    "students": [
        {}
    ],
    "assignments": [
        {
            "id": "001",
            "title": "Web scrapper in Python",
            "description": "Write a Python script to scrape a website and extract specific information (e.g., headlines, prices, etc.) using libraries like BeautifulSoup or Scrapy.",
            "date_created": "17/03/2024",
            "due_date": "19/03/2024",
            "difficulty": "medium",
            "sample_input": "",
            "sample_output": "",
            "uploads": [],
            "problem_statement": "Problem Statement: Website Scraping Script for Information Extraction using Python\nOverview:\nYour task is to develop a Python script capable of scraping a specified website and extracting targeted information, such as headlines, prices, or other relevant content from its web pages. This project will require the use of web scraping libraries like BeautifulSoup or Scrapy for efficient data extraction.\n\nRequirements:\nYour script should fulfill the following requirements:\n\nTarget Website: Implement the ability to scrape a specified website. Define a variable or input mechanism to allow the user to provide the URL of the target website.\nData Extraction: Use web scraping techniques to extract specific types of information from the web pages. This may include:\nExtracting headlines or titles of articles.\nRetrieving prices of products.\nCapturing descriptions, ratings, or other relevant metadata.\nPython Implementation: Develop the script using Python as the primary programming language.\nUse of Libraries:\nBeautifulSoup: For parsing HTML and navigating through the website's DOM (Document Object Model) structure.\nRequests: For making HTTP requests to fetch web pages.\nOptionally, use Scrapy if the project requires more complex web scraping with asynchronous capabilities and built-in features for large-scale crawling.\nUser Interaction: Allow flexibility for the user to specify the target website URL and the type of data to be extracted (e.g., headlines, prices).\nOutput: Provide the extracted data in a structured format (e.g., JSON, CSV) that can be easily processed or stored for further analysis.\nDeliverables:\nYou are expected to deliver the following components:\n\nPython Script: Develop a well-structured Python script that implements web scraping functionalities using BeautifulSoup or Scrapy.\nDocumentation: Include clear instructions on how to run the script, specify input parameters (e.g., website URL), and interpret the output format.\nSample Output: Provide examples of the extracted data in the specified format (e.g., JSON output containing headlines or prices).\nEvaluation:\nYour solution will be evaluated based on the following criteria:\n\nFunctionality: The script should successfully scrape the specified website and accurately extract the desired information.\nCode Quality: Ensure the code is well-organized, readable, and follows best practices for Python development.\nRobustness: Handle potential errors gracefully, such as handling network issues or unexpected HTML structures.\nDocumentation: Include comprehensive instructions and comments within the code to aid understanding and usage.\nExample Scenario:\nSuppose you are tasked with scraping an e-commerce website to extract product prices. Your script should be able to fetch the HTML content of the product pages, parse it using BeautifulSoup, identify price elements, and then output a list of extracted prices in a structured format (e.g., JSON).\n\nAdditional Notes:\nRespect robots.txt guidelines and website terms of service when scraping data.\nConsider implementing rate limiting to avoid overloading the target website's servers with requests."
        },
        {
            "id": "002",
            "title": "Calculator API in NodeJS",
            "description": "The \"Calculator API in Node.js\" project involves creating a RESTful API using Node.js that provides basic calculator functionalities such as addition, subtraction, multiplication, and division. This API will allow clients to perform mathematical operations by sending HTTP requests with appropriate parameters and return the computed results in JSON format.",
            "date_created": "22/03/2024",
            "due_date": "23/03/2024",
            "difficulty": "easy",
            "sample_input": "",
            "sample_output": "",
            "uploads": [],
            "problem_statement": "Problem Statement:\nDevelop an efficient and scalable API service in Node.js that implements basic arithmetic operations. The API should handle incoming HTTP requests with specified operation parameters (e.g., numbers for addition, subtraction, etc.) and respond with the computed result. This project aims to provide a simple yet functional calculator service accessible via HTTP endpoints, suitable for integration into various applications and services. Key objectives include:\n\nImplementing CRUD Operations: Design API endpoints to support basic CRUD (Create, Read, Update, Delete) operations for performing mathematical computations.\nError Handling: Handle edge cases and error scenarios gracefully, ensuring the API remains stable and responsive.\nValidation and Security: Implement input validation to ensure the integrity of incoming requests and enhance API security against potential threats like injection attacks.\nScalability and Performance: Develop the API with scalability in mind, allowing for concurrent requests and optimizing performance to handle a significant number of computations efficiently.\nDocumentation: Provide clear documentation for API usage, including endpoint descriptions, input parameters, and response formats, to facilitate easy integration by client applications.\nDeliverables:\nThe project deliverables include:\n\nNode.js API Application: Develop a well-structured Node.js application that exposes HTTP endpoints for calculator operations (e.g., /add, /subtract, /multiply, /divide).\nDocumentation: Create comprehensive API documentation (e.g., using Swagger/OpenAPI) describing endpoints, input parameters, and response formats.\nUnit Testing: Write unit tests to ensure the correctness of arithmetic operations and API functionality.\nError Handling: Implement robust error handling to manage invalid inputs, server errors, and other potential issues gracefully.\nEvaluation:\nThe solution will be evaluated based on the following criteria:\n\nFunctionality: The API should accurately perform basic arithmetic operations based on incoming requests.\nCode Quality: Ensure the code is well-organized, follows best practices for Node.js development, and maintains readability.\nError Handling: Handle edge cases and errors effectively, returning appropriate error responses when necessary.\nPerformance: Optimize the API for performance and scalability, capable of handling concurrent requests without performance degradation.\nDocumentation: Provide clear and concise documentation to facilitate easy adoption and usage of the API by client developers.\nExample Use Case:\nA client application requires a simple API service to perform arithmetic calculations. They can integrate your Calculator API to add, subtract, multiply, or divide numbers by sending HTTP requests to the respective endpoints and receive the computed results in JSON format.\n\nAdditional Notes:\nConsider using Express.js as the web framework for building the API due to its simplicity and popularity within the Node.js ecosystem.\nExplore middleware options for input validation, logging, and other cross-cutting concerns to enhance API robustness and maintainability."
        },
        {
            "id": "003",
            "title": "Student Record Management System in C++",
            "description": "The \"Student Record Management System in C++\" project involves developing a console-based application to manage student records. This system will allow users to perform operations like adding new student records, displaying existing records, updating information, and deleting records. The application will utilize file handling techniques to store and retrieve student data persistently.",
            "date_created": "01/04/2024",
            "due_date": "09/04/2024",
            "difficulty": "hard",
            "sample_input": "",
            "sample_output": "",
            "uploads": [],
            "problem_statement": "Design and implement a C++ program that serves as a student record management system. The system should provide functionalities to interactively manage student records stored in a file. Key objectives of this project include:\n\nData Storage: Implement file handling techniques to store student records persistently on disk.\nCRUD Operations: Enable users to perform CRUD (Create, Read, Update, Delete) operations on student records:\nCreate: Allow users to add new student records with details such as name, roll number, marks, etc.\nRead: Provide options to display all student records or search for specific records based on criteria like roll number or name.\nUpdate: Allow users to update information for existing student records.\nDelete: Provide functionality to delete student records.\nInteractive Console Interface: Design a user-friendly console-based interface for interacting with the system, displaying menus and options for various operations.\nError Handling: Implement robust error handling to manage invalid inputs, file I/O errors, and other potential issues gracefully.\nData Validation: Validate user inputs to ensure data integrity and prevent incorrect or inconsistent data entry.\nDeliverables:\nThe project deliverables include:\n\nC++ Program: Develop a well-structured C++ program that implements the student record management system with CRUD operations and file handling functionalities.\nUser Interface: Design a clear and intuitive console-based user interface (UI) for interacting with the system, featuring menus, prompts, and error messages.\nData Persistence: Utilize file handling techniques (e.g., text file or binary file) to store and retrieve student records from external storage.\nDocumentation: Provide concise documentation explaining how to compile, run, and use the application, including sample input/output scenarios.\nEvaluation:\nThe solution will be evaluated based on the following criteria:\n\nFunctionality: The program should accurately manage student records with CRUD operations and demonstrate correct file handling techniques.\nCode Quality: Ensure the C++ code is well-organized, follows best practices, and maintains readability.\nUser Interface: Design an intuitive and responsive console UI that guides users through various operations effectively.\nError Handling: Handle exceptions and errors gracefully, providing informative error messages to users when necessary.\nData Validation: Implement validation mechanisms to ensure the integrity and correctness of user inputs.\nExample Use Case:\nA school administrator wants to maintain a digital record of student information. They can use your Student Record Management System to add new students, update existing records, and retrieve specific details as needed, all through a simple console-based interface.\n\nAdditional Notes:\nConsider using object-oriented programming (OOP) principles to model student records as objects with attributes and behaviors.\nExplore efficient file handling techniques to manage data persistence and ensure data integrity across different program sessions.\n"
        }
    ]
}